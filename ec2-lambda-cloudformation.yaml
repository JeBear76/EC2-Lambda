AWSTemplateFormatVersion: '2010-09-09'
Description: EC2-Lambda
Parameters:
  GenericPrefix:
    Description: This will prefix all resource names
    Type: String
  ProjectName: 
    Description: Will be prefixed with Generic prefix and used for tagging (must start with CAD-/cad-)
    Type: String
    AllowedPattern: (^CAD-|^cad-)[\w-]{1,58}\w$
    MinLength: 8
  BucketPrefix:
    Description: To create input, output and code buckets
    Type: String 
    AllowedPattern: (?!(^xn--|.+-s3alias$))^cad-[a-z0-9-]{3,58}[a-z0-9]$
  VPCCidrBlock:
    Description: Where do we put all this
    Type: String
    Default: 10.121.0.224/28
  AMI:
    Description: Amazon Linux Ami with dornet 6
    Type: String
    Default: ami-056d2deb35634ac41  
  EC2InstanceName:
    Description: For tagging, name of the instance 
    Type: String
    Default: dotnetRunner
Resources:
# VPC Endpoints
  CWLogsInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref DedicatedVPC
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet
  LambdaInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.lambda
      VpcId: !Ref DedicatedVPC
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet
  EC2InterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcId: !Ref DedicatedVPC
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet
  SSMInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref DedicatedVPC
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref DedicatedVPC
      RouteTableIds:
        - !Ref RouteTable
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:*
            Resource:
              - arn:aws:s3:::*

# Network
  DedicatedVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
        - Key: Name
          Value:
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
                - '-VPC'
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DedicatedVPC
      CidrBlock: !GetAtt DedicatedVPC.CidrBlock
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
        - Key: Name
          Value:
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
                - '-subnet'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DedicatedVPC
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
        - Key: Name
          Value:
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
                - '-Routes'
  PrivateSubnetRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnet
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: secureSecGroup
      GroupDescription: 
        !Join 
          - ''
          - - 'Security Group for '
            - !Ref EC2InstanceName
            - 'and VPC Endpoints'
      VpcId: !Ref DedicatedVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !GetAtt PrivateSubnet.CidrBlock
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: !GetAtt PrivateSubnet.CidrBlock
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
        - Key: Name
          Value:
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
                - '-sg'

# S3 Buckets
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - !Ref BucketPrefix
            - '-input'
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - !Ref BucketPrefix
            - '-output'
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - !Ref BucketPrefix
            - '-code'
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName

# IAM Policies and Roles
  EC2AccesForLambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn: LambdaEC2RunnerRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DescribeTags
            Effect: Allow
            Action: ec2:DescribeTags
            Resource: '*'
          - Sid: StartStopTerminateInstancesInAccount
            Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:RunInstances
              - ec2:TerminateInstances
              - ec2:StopInstances
              - ec2:CreateTags
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}::image/ami-*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
      PolicyName: poc-ec2-access-for-lambda
      Roles:
        - !Ref LambdaEC2RunnerRole
  IAMAccessForLambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn: LambdaEC2RunnerRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: iam:PassRole
            Resource: !GetAtt EC2ProcessorRole.Arn
      PolicyName: iam-access-for-lambda
      Roles:
        - !Ref LambdaEC2RunnerRole
  LambdaEC2RunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - Lambda-EC2-Runner-Role
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName

  S3AccessForEC2Policy:
    Type: AWS::IAM::Policy
    DependsOn: EC2ProcessorRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: s3AccesForEc2
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${InputBucket}
              - !Sub arn:aws:s3:::${OutputBucket}
              - !Sub arn:aws:s3:::${CodeBucket}
              - arn:aws:s3:::*/*
      PolicyName: s3-access-for-ec2
      Roles:
        - !Ref EC2ProcessorRole
  LambdaAccessForEC2Policy:
    Type: AWS::IAM::Policy
    DependsOn: EC2ProcessorRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
            Resource: !Sub arn:aws:lambda:*:${AWS::AccountId}:function:*
      PolicyName: lambda-access-for-ec2
      Roles:
        - !Ref EC2ProcessorRole
  CloudWatchAccessForEC2Policy:
    Type: AWS::IAM::Policy
    DependsOn: EC2ProcessorRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
      PolicyName: cloudwatch-access-for-ec2
      Roles:
        - !Ref EC2ProcessorRole
  EC2AccessForEC2Policy:
    Type: AWS::IAM::Policy
    DependsOn: EC2ProcessorRole
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeTags
            Resource: '*'
      PolicyName: ec2-access-for-ec2
      Roles:
        - !Ref EC2ProcessorRole
  SystemManagerAccessForEC2Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameter
            Resource: '*'
      PolicyName: system-manager-access-for-ec2
      Roles:
        - !Ref EC2ProcessorRole
  EC2ProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
      RoleName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - EC2-Processor-Role
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName

# System Manager Parameter
  CodeBucketSSMParameterForAmi:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      DataType: text
      Description: EC2 bucket and prefix for EC2 instance to download executable code
      Name: 
        !Join 
          - ''
          - - '/'
            - !Ref GenericPrefix
            - !Ref ProjectName
            - '/codeBucket'
      Tags:
        Project: 
          !Join
            - ''
            - - !Ref GenericPrefix
              - !Ref ProjectName
      Value: 
        !Join 
          - ''
          - - !Ref CodeBucket
            - '/publish'

# Lambda Functions
  EC2StarterLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaEC2RunnerRole
      - PrivateSubnetRouteTable
    Properties:
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import logging
          logger = logging.getLogger()
          def lambda_handler(event, context):
              logger.info(event)
              client = boto3.client("ec2")
              
              dryRun=eval(event.get('dryRun', 'False'))
              
              subnetId = os.environ['subnet_id']
              securityGroupId = os.environ['security_group_id']
              projectName = os.environ['project']
              instanceName = os.environ['instance_name']
              instanceProfile = os.environ['instance_profile']
              baseAmi = os.environ['killable_appserver_ami']
              keyPair = os.environ['key_pair']
              codeBucket = os.environ['code_bucket']

              response = client.run_instances(
                  ImageId=baseAmi,
                  KeyName=keyPair,
                  InstanceType='t2.micro',
                  SubnetId= subnetId,
                  SecurityGroupIds=[
                      securityGroupId,
                  ],
                  MinCount=1,
                  MaxCount=1,
                  InstanceInitiatedShutdownBehavior='terminate',
                  IamInstanceProfile={
                      'Name': instanceProfile
                  },
                  TagSpecifications=[
                      {
                          'ResourceType': 'instance',
                          'Tags': [
                              {
                                  'Key': 'Project',
                                  'Value': projectName
                              },
                              {
                                  'Key': 'Name',
                                  'Value': 
                              },
                          ]
                      },
                      {
                          'ResourceType': 'network-interface',
                          'Tags': [
                              {
                                  'Key': 'Project',
                                  'Value': projectName
                              },
                          ]
                      },
                      {
                          'ResourceType': 'volume',
                          'Tags': [
                              {
                                  'Key': 'Project',
                                  'Value': projectName
                              },
                          ]
                      }
                  ],
                  UserData='''
                  #!/bin/bash
                  sudo service awslogs start
                  (TAG_NAME="Project"
                  INSTANCE_ID="`wget -qO- http://instance-data/latest/meta-data/instance-id`"
                  REGION="`wget -qO- http://instance-data/latest/meta-data/placement/availability-zone | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
                  TAG_VALUE="`aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=$TAG_NAME" --region $REGION --output=text | cut -f5`"
                  
                  aws ssm get-parameter --name /${TAG_VALUE}/codeBucket --region ${REGION} > param
                  S3_CODE_BUCKET=`awk -F '"' '/Value/{print $(NF-1)}' param`
                  
                  aws s3 sync s3://$S3_CODE_BUCKET ~/apps/processStarter
                  
                  . ~/apps/processStarter/runProcess.sh) 2>&1
                  ''',
                  DryRun=dryRun
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps(response, default=str)
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEC2RunnerRole.Arn
      Runtime: python3.12
      FunctionName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - ec2StarterLambda
      MemorySize: 128
      Timeout: 60
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
        LogGroup: 
          !Join
            - ''
            - - !Ref GenericPrefix
              - !Ref ProjectName
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds: 
          - !Ref PrivateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          killable_appserver_ami: !Ref AMI
          key_pair: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - ec2-lambda-keypair
          project: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
          code_bucket: !Ref CodeBucket
          subnet_id: !Ref PrivateSubnet
          instance_name: !Ref EC2InstanceName
          instance_profile: !Ref EC2InstanceProfile
          security_group_id: !Ref PrivateSecurityGroup          
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
  EC2KillerLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaEC2RunnerRole
      - PrivateSubnetRouteTable
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          logger = logging.getLogger()
          def lambda_handler(event, context):
              logger.info(event)
              client = boto3.client("ec2")
              instance = event['instance']
              dryRun = eval(event['dryRun'])
              response = client.terminate_instances(
                  InstanceIds=[
                      instance
                  ],
                  DryRun=dryRun
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps(response)
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEC2RunnerRole.Arn
      Runtime: python3.12
      FunctionName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - ec2KillerLambda
      MemorySize: 128
      Timeout: 15
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
        LogGroup: 
          !Join
            - ''
            - - !Ref GenericPrefix
              - !Ref ProjectName
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds: 
          - !Ref PrivateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName

# Prerequisites for EC2 Instance Launch
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - ec2-lambda-keypair
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2ProcessorRole
    Properties:
      InstanceProfileName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - EC2-Processor-Profile
      Roles:
        - !Ref EC2ProcessorRole
# Additional Tagging
  VPCEndpointTaggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function to Tag VPC Enpoints in CloudFormation
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import logging
          import cfnresponse
          logger = logging.getLogger()
          def lambda_handler(event, context):
              logger.info(event)
              try:
                client = boto3.client("ec2")
                logger.info(json.dumps(client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['ssm_interface_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Name',
                            'Value': f'${os.environ['project']}-ssm'
                        }
                    ]
                )))

                logger.info(json.dumps(client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['s3_gateway_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Name',
                            'Value': f'${os.environ['project']}-s3'
                        }
                    ]
                )))
                
                logger.info(json.dumps(client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['lambda_interface_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Name',
                            'Value': f'${os.environ['project']}-lambda'
                        }
                    ]
                )))
                
                logger.info(json.dumps(client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['ec2_interface_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Name',
                            'Value': f'${os.environ['project']}-ec2'
                        }
                    ]
                )))
                
                logger.info(json.dumps(client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['cwlogs_interface_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Name',
                            'Value': f'${os.environ['project']}-cwlogs'
                        }
                    ]
                )))
                
                response=client.create_tags(
                    DryRun=False,
                    Resources=[
                        os.environ['ssm_interface_endpoint'],
                        os.environ['s3_gateway_endpoint'],
                        os.environ['lambda_interface_endpoint'],
                        os.environ['ec2_interface_endpoint'],
                        os.environ['cwlogs_interface_endpoint'],
                    ],
                    Tags=[
                        {
                            'Key': 'Project',
                            'Value': os.environ['project']
                        }
                    ]                      
                )
                cfnResult = cfnresponse.SUCCESS
                logger.info(json.dumps(response))
              except:
                cfnResult = cfnresponse.SUCCESS
                logger.exception('Error Tagging Things')
                response = '{ \'Exception\': \'Error Tagging Things\' }'
              
              cfnresponse.send(event, context, cfnResult)
              
              return True

      Runtime: python3.12
      FunctionName: 
        !Join
          - ''
          - - !Ref GenericPrefix
            - vpcTaggerLambda
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEC2RunnerRole.Arn
      MemorySize: 128
      Timeout: 30
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
        LogGroup: 
          !Join
            - ''
            - - !Ref GenericPrefix
              - !Ref ProjectName
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds: 
          - !Ref PrivateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          project: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName          
          ssm_interface_endpoint: !Ref SSMInterfaceEndpoint
          s3_gateway_endpoint: !Ref S3GatewayEndpoint
          lambda_interface_endpoint: !Ref LambdaInterfaceEndpoint
          ec2_interface_endpoint: !Ref EC2InterfaceEndpoint
          cwlogs_interface_endpoint: !Ref CWLogsInterfaceEndpoint
      Tags:
        - Key: Project
          Value: 
            !Join
              - ''
              - - !Ref GenericPrefix
                - !Ref ProjectName
  VPCEndpointTags:
    Type: Custom::Tagger
    DependsOn:
      - SSMInterfaceEndpoint
      - S3GatewayEndpoint
      - LambdaInterfaceEndpoint
      - EC2InterfaceEndpoint
      - CWLogsInterfaceEndpoint
    Properties:
      ServiceToken: !GetAtt VPCEndpointTaggerLambda.Arn
      Region: ${AWS::Region}
Outputs:
  EC2KillerLambdaExport:
    Description: The lambda killer function name
    Value: !GetAtt EC2KillerLambda.Arn
    Export: 
      Name: !Sub '${AWS::StackName}-EC2KillerLambda'
  CodeBucketExport:
    Description: The bucket where the code must be published
    Value: !Ref CodeBucket
    Export: 
      Name: !Sub '${AWS::StackName}-CodeBucket'